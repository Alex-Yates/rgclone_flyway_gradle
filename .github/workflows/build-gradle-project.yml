name: Build Gradle project

on:
  push:

jobs:
  build-gradle-project:
    runs-on: ubuntu-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
    - name: Checkout project sources
      uses: actions/checkout@v2
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    # - name: Setup rgClone
    #   run: |
    #     chmod +x ./gradle/gradlew
    #     cd ./gradle
    #     ./gradlew setupRgCloneCli -PrgCloneEndpoint="${{ secrets.RGCLONE_ENDPOINT }}" -PrgCloneToken="${{ secrets.RGCLONE_TOKEN }}"
    # - name: Create Data-Container (lifetime 5m)
    #   run: |
    #     CONTAINERNAME="test_${{ github.run_id }}_${{ github.run_attempt }}"
    #     cd ./gradle
    #     ./gradlew createDataContainer -PrgCloneEndpoint="${{ secrets.RGCLONE_ENDPOINT }}" -PcontainerName="${CONTAINERNAME}"
    # - name: View all rgClone images and containers
    #   run: |
    #     CONTAINERNAME="test_${{ github.run_id }}_${{ github.run_attempt }}"
    #     cd ./gradle
    #     ./gradlew getContainer -PrgCloneEndpoint="${{ secrets.RGCLONE_ENDPOINT }}" -PcontainerName="${CONTAINERNAME}"
    # - name: Run Flyway
    #   run: |
    #     cd ./gradle
    #     ./gradlew flywayApp --args=--spring.flyway.licenseKey=${{ secrets.FLYWAY_LICENCE}}
    - name: Run RGClone with Flyway in Spring Boot
      run: |
        CONTAINERNAME="test_${{ github.run_id }}_${{ github.run_attempt }}"
        chmod +x ./gradle/gradlew
        cd ./gradle
        ./gradlew startCloneAndMigrate -PrgCloneEndpoint="${{ secrets.RGCLONE_ENDPOINT }}" -PrgCloneToken="${{ secrets.RGCLONE_TOKEN }}" -PcontainerName="${CONTAINERNAME}" -PflywayLicenseKey=${{ secrets.FLYWAY_LICENCE}}