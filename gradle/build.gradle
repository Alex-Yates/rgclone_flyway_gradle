plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.redgate'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url "https://download.red-gate.com/maven/release/" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.flywaydb.enterprise:flyway-core:9.16.2'
    implementation 'com.oracle.database.jdbc:ojdbc8'
}

task setupRgCloneCli {
    // Declaring a couple of parameters, so that we can use GitHub secrets for the rgclone endpoint and token.
    def rgCloneEndpoint = project.property('rgCloneEndpoint')
    def rgCloneToken = project.property('rgCloneToken')

    // Downloading rgClone
    exec {
        commandLine 'curl', '-o', 'rgclone.tar.gz', "$rgCloneEndpoint/cloning-api/download/cli/linux-amd64"
    }

    // Extracting rgClone
    exec {
        commandLine 'tar', 'xz', '-f', 'rgclone.tar.gz'
    }

    // Using rgClone to authenticate against the Redgate Clone server
    exec {
        // I've so far failed to set RGCLONE_API_ENDPOINT globally, but this works within a single exec block
        environment 'RGCLONE_API_ENDPOINT', rgCloneEndpoint

        // I'm sure there's a better way to get the path to rgclone, but this works
        workingDir '.'
        commandLine './rgclone', 'auth', '-t', rgCloneToken
    }
}

task createDataContainer {
    // Declaring a couple of parameters, so that we can use GitHub secrets for the rgclone endpoint and token.
    def rgCloneEndpoint = project.property('rgCloneEndpoint')
    def containerName = project.property('containerName')


    exec {
        environment 'RGCLONE_API_ENDPOINT', rgCloneEndpoint
        workingDir '.' // Set the working directory to the current directory
        commandLine './rgclone', 'create', 'data-container', '--name', containerName, '--lifetime', '5m', '-i', '111'
    }
}

task getContainer {
    // Declaring a couple of parameters, so that we can use GitHub secrets for the rgclone endpoint and token.
    def rgCloneEndpoint = project.property('rgCloneEndpoint')
    def containerName = project.property('containerName')

    // Using rgClone to find out what images and containers we have access to.
    def stdout = new ByteArrayOutputStream()
    exec {
        environment 'RGCLONE_API_ENDPOINT', rgCloneEndpoint
        workingDir '.'
        commandLine 'sh', '-c', "./rgclone get data-container ${containerName} -o json | jq .jdbcConnectionString"
        standardOutput = stdout
    }
    ext.jdbcUrl = stdout.toString().trim()
}

task startCloneAndMigrate {
    createDataContainer.mustRunAfter setupRgCloneCli
    getContainer.mustRunAfter createDataContainer
    dependsOn setupRgCloneCli
    dependsOn createDataContainer
    dependsOn getContainer

    def flywayLicenseKey = project.property('flywayLicenseKey')
    javaexec {
        environment 'CLONE_URL', getContainer.jdbcUrl
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'com.redgate.Application'
        args "--spring.flyway.licenseKey=${flywayLicenseKey}"
    }
}
